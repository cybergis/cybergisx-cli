#!/usr/bin/env python3
import click
import json
import os
import shutil

TOOLNAME = "cybergisx"
PLATFORM = "CyberGISX"
__version__ = "0.9.0-dev"

CIGI_EB_KERNEL_DIR = os.getenv("CIGI_EB_KERNEL_DIR")
IN_CONTAINER_KERNEL_PATH = os.getenv("IN_CONTAINER_KERNEL_PATH")
IN_CONTAINER_PERSONAL_KERNELS = os.getenv("IN_CONTAINER_PERSONAL_KERNELS")
CIGI_PERSONAL_CONFIG = os.path.join(IN_CONTAINER_PERSONAL_KERNELS, "../config.json")


CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])


def copy_dir(source, target, overwrite=True):
    if overwrite and os.path.exists(target):
        shutil.rmtree(target)
    shutil.copytree(source, target)


def delete_path(path):
    """Deletes a path and prompts for confirmation"""
    if click.confirm("This action will delete {}, would you like to continue?".format(path)):
        shutil.rmtree(path)


def get_available_kernels():
    """Returns a list of kernels available to install"""
    return [f for f in os.listdir(CIGI_EB_KERNEL_DIR) if os.path.isdir(os.path.join(CIGI_EB_KERNEL_DIR, f))]


def get_personal_kernels_dir():
    """Returns a list of personal kernels using folders in the personal kernel dir"""
    return [f for f in os.listdir(IN_CONTAINER_PERSONAL_KERNELS) if os.path.isdir(os.path.join(IN_CONTAINER_PERSONAL_KERNELS, f))]


def get_personal_kernels_json():
    try:
        with open(CIGI_PERSONAL_CONFIG) as infile:
            data = json.load(infile)
            if 'personal_kernels' in data:
                return data['personal_kernels']
            else:
                return []
    except:
        return []  # this is expected for now


def install_personal_kernels_dir(install):
    kernels = get_available_kernels()
    if install in kernels:
        print("Installing {}...".format(install))
        to_install_dir = os.path.join(CIGI_EB_KERNEL_DIR, install)
        copy_dir(to_install_dir, os.path.join(IN_CONTAINER_PERSONAL_KERNELS, install))
        copy_dir(to_install_dir, os.path.join(IN_CONTAINER_KERNEL_PATH, install))
    else:
        print("{} not in available kernels.".format(install))
        print_avail_kernels()


def install_personal_kernels_json(install):
    kernels = get_available_kernels()
    if install in kernels:
        print("Installing {}...".format(install))
        to_install_dir = os.path.join(CIGI_EB_KERNEL_DIR, install)
        copy_dir(to_install_dir, os.path.join(IN_CONTAINER_KERNEL_PATH, install))
        personal_kernels = get_personal_kernels_json()
        personal_kernels.append(install)
        write_personal_kernel_json(personal_kernels)
    else:
        print("{} not in available kernels.".format(install))
        print_avail_kernels()


def print_avail_kernels():
    """Prints available kernels"""
    kernels = get_available_kernels()
    print("Available kernels:")
    for kernel in kernels:
        print("  * {}".format(kernel))


def print_personal_kernels():
    """Prints the user's personal kernels"""
    personal_kernels = get_personal_kernels_json()
    if len(personal_kernels) > 0:
        print("Your personal kernels are:")
        for kernel in personal_kernels:
            print("  * {}".format(kernel))
    else:
        print("No personal kernels found at {}".format(IN_CONTAINER_PERSONAL_KERNELS))


def remove_personal_kernel_dir(to_remove):
    personal_kernels = get_personal_kernels_dir()
    if to_remove in personal_kernels:
        to_delete = os.path.join(IN_CONTAINER_PERSONAL_KERNELS, to_remove)
        delete_path(to_delete)
    else:
        print("{} not found in personal kernels".format(to_remove))
        print_personal_kernels()


def remove_personal_kernel_json(to_remove):
    """Removes a personal kernel from JSON config"""
    personal_kernels = get_personal_kernels_json()
    if to_remove in personal_kernels:
        personal_kernels.remove(to_remove)
    write_personal_kernel_json(personal_kernels)


def run_startup_tasks():
    """
    Runs startup tasks:

    * Installs kernels to IN_CONTAINER_KERNEL_PATH
    """
    transition_pk_dir2json()
    personal_kernels = get_personal_kernels_json()
    kernels = get_available_kernels()
    for personal_kernel in personal_kernels:
        if personal_kernel in kernels:
            to_install_dir = os.path.join(CIGI_EB_KERNEL_DIR, personal_kernel)
            copy_dir(to_install_dir, os.path.join(IN_CONTAINER_KERNEL_PATH, personal_kernel))


def transition_pk_dir2json():
    """Function for transitioning personal kernels from directory-based
    to JSON-based configuration"""
    dir_pk = get_personal_kernels_dir()
    combined_pk = dir_pk + get_personal_kernels_json()
    write_personal_kernel_json(combined_pk)


def validate_personal_kernels(kernels_to_validate):
    ak = get_available_kernels()
    for k in kernels_to_validate:
        if k not in ak:  # if kernel not available
            kernels_to_validate.remove(k)
    return kernels_to_validate


def write_personal_kernel_json(list_of_kernels):
    """Write list of personal kernels to CIGI config"""
    list_of_kernels = list(set(list_of_kernels))
    list_of_kernels = validate_personal_kernels(list_of_kernels)
    if os.path.isfile(CIGI_PERSONAL_CONFIG):
        # read file and write to it
        with open(CIGI_PERSONAL_CONFIG) as infile:
            data = json.load(infile)
        data['personal_kernels'] = list_of_kernels
        with open(CIGI_PERSONAL_CONFIG, 'w+') as outfile:
            json.dump(data, outfile)
    else:
        data = {'personal_kernels': list_of_kernels}
        with open(CIGI_PERSONAL_CONFIG, 'w+') as outfile:
            json.dump(data, outfile)


@click.group(context_settings=CONTEXT_SETTINGS, invoke_without_command=True, no_args_is_help=True)
@click.option("-a", "--avail", is_flag=True, help="See available {} kernels.".format(PLATFORM))
@click.option("-i", "--install", type=click.Path(), help="Install an available kernel.")
@click.option("-p", "--personal", is_flag=True, help="See your personal kernels.")
@click.option("-rp", "--remove-personal", type=click.Path(), help="Remove a personal kernel.")
@click.option("-s", "--startup", is_flag=True, help="Performs startup tasks.", hidden=True)
@click.version_option(__version__, "-v", "--version")
def cli(avail, install, personal, remove_personal, startup):
    if avail:
        print_avail_kernels()
    elif install:
        install_personal_kernels_json(install)
    elif personal:
        print_personal_kernels()
    elif remove_personal:
        remove_personal_kernel_json(remove_personal)
    elif startup:
        run_startup_tasks()


if __name__ == "__main__":
    cli()
